/*
 * RobusTest Api
 * RobusTest Apis
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.JiraConfig;
import io.swagger.client.model.JiraConfigPayload;
import io.swagger.client.model.JiraIssuePayload;
import io.swagger.client.model.JiraIssueResponse;
import io.swagger.client.model.JiraProject;
import io.swagger.client.model.Project;
import io.swagger.client.model.ProjectUpdatePayload;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * get list for all supported bug trakers
     *
     * get list for all supported bug trakers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bugTest() throws ApiException {
        List<String> response = api.bug();

        // TODO: test validations
    }
    
    /**
     * get all jira config
     *
     * get all jira config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jiraTest() throws ApiException {
        List<JiraConfig> response = api.jira();

        // TODO: test validations
    }
    
    /**
     * create a jira config
     *
     * create a jira config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jiraConfigTest() throws ApiException {
        JiraConfigPayload body = null;
        List<String> response = api.jiraConfig(body);

        // TODO: test validations
    }
    
    /**
     * update a jira config
     *
     * update a jira config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jiraConfig_0Test() throws ApiException {
        JiraConfigPayload payload = null;
        JiraConfig response = api.jiraConfig_0(payload);

        // TODO: test validations
    }
    
    /**
     * update all projects for a jira config
     *
     * update all projects for a jira config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jiraConfig_1Test() throws ApiException {
        List<String> response = api.jiraConfig_1();

        // TODO: test validations
    }
    
    /**
     * create a jira issue
     *
     * create a jira issue
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jiraIssueTest() throws ApiException {
        JiraIssuePayload body = null;
        JiraIssueResponse response = api.jiraIssue(body);

        // TODO: test validations
    }
    
    /**
     * get all jira project
     *
     * get all jira project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jira_0Test() throws ApiException {
        List<JiraProject> response = api.jira_0();

        // TODO: test validations
    }
    
    /**
     * get all jira project for given config
     *
     * get all jira project for given config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jira_1Test() throws ApiException {
        List<JiraProject> response = api.jira_1();

        // TODO: test validations
    }
    
    /**
     * get a jira project  details
     *
     * get a jira project details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jira_2Test() throws ApiException {
        JiraProject response = api.jira_2();

        // TODO: test validations
    }
    
    /**
     * Update Project
     *
     * Update Project from user interface
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTest() throws ApiException {
        ProjectUpdatePayload body = null;
        Project response = api.project(body);

        // TODO: test validations
    }
    
}
