=begin
#RobusTest Hub

#RobusTest Hub Api [http://enterprice.robustest.com:8085 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class HubApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # run adb  command
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Device5] :device 
    # @return [InlineResponse2001]
    def adb_command(opts = {})
      data, _status_code, _headers = adb_command_with_http_info(opts)
      return data
    end

    # run adb  command
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Device5] :device 
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def adb_command_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HubApi.adb_command ..."
      end
      # resource path
      local_var_path = "/device/command"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'device'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HubApi#adb_command\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # run adb shell command
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Device4] :device 
    # @return [InlineResponse200]
    def device_shell(opts = {})
      data, _status_code, _headers = device_shell_with_http_info(opts)
      return data
    end

    # run adb shell command
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Device4] :device 
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def device_shell_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HubApi.device_shell ..."
      end
      # resource path
      local_var_path = "/device/shell"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'device'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HubApi#device_shell\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list all attached devices to RobusTest
    # 
    # @param [Hash] opts the optional parameters
    # @return [HubDevices]
    def devices_list(opts = {})
      data, _status_code, _headers = devices_list_with_http_info(opts)
      return data
    end

    # list all attached devices to RobusTest
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(HubDevices, Fixnum, Hash)>] HubDevices data, response status code and response headers
    def devices_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HubApi.devices_list ..."
      end
      # resource path
      local_var_path = "/devices"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HubDevices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HubApi#devices_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # free device
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Device1] :device 
    # @return [Device]
    def free_device(opts = {})
      data, _status_code, _headers = free_device_with_http_info(opts)
      return data
    end

    # free device
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Device1] :device 
    # @return [Array<(Device, Fixnum, Hash)>] Device data, response status code and response headers
    def free_device_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HubApi.free_device ..."
      end
      # resource path
      local_var_path = "/device"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'device'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Device')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HubApi#free_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get free device based on given parameters
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Device] :device 
    # @return [Device]
    def get_free_device(opts = {})
      data, _status_code, _headers = get_free_device_with_http_info(opts)
      return data
    end

    # get free device based on given parameters
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Device] :device 
    # @return [Array<(Device, Fixnum, Hash)>] Device data, response status code and response headers
    def get_free_device_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HubApi.get_free_device ..."
      end
      # resource path
      local_var_path = "/device"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'device'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Device')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HubApi#get_free_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get screenshot from device
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Device2] :device 
    # @return [File]
    def get_screenshot(opts = {})
      data, _status_code, _headers = get_screenshot_with_http_info(opts)
      return data
    end

    # get screenshot from device
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Device2] :device 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def get_screenshot_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HubApi.get_screenshot ..."
      end
      # resource path
      local_var_path = "/device/screenshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'device'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HubApi#get_screenshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # unrevrse the device
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Device3] :device 
    # @return [Device]
    def unreserve_device(opts = {})
      data, _status_code, _headers = unreserve_device_with_http_info(opts)
      return data
    end

    # unrevrse the device
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Device3] :device 
    # @return [Array<(Device, Fixnum, Hash)>] Device data, response status code and response headers
    def unreserve_device_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: HubApi.unreserve_device ..."
      end
      # resource path
      local_var_path = "/device/screenshot"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'device'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Device')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HubApi#unreserve_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
