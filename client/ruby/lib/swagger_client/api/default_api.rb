=begin
#RobusTest Api

#RobusTest Apis

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # get list for all supported bug trakers
    # get list for all supported bug trakers
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def bug(opts = {})
      data, _status_code, _headers = bug_with_http_info(opts)
      return data
    end

    # get list for all supported bug trakers
    # get list for all supported bug trakers
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def bug_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.bug ..."
      end
      # resource path
      local_var_path = "/admin/v3/bug/trackerlist"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#bug\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get all jira config
    # get all jira config
    # @param [Hash] opts the optional parameters
    # @return [Array<JiraConfig>]
    def jira(opts = {})
      data, _status_code, _headers = jira_with_http_info(opts)
      return data
    end

    # get all jira config
    # get all jira config
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<JiraConfig>, Fixnum, Hash)>] Array<JiraConfig> data, response status code and response headers
    def jira_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.jira ..."
      end
      # resource path
      local_var_path = "/admin/v3/bug/config/jira"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<JiraConfig>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#jira\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get all jira project
    # get all jira project
    # @param [Hash] opts the optional parameters
    # @return [Array<JiraProject>]
    def jira_0(opts = {})
      data, _status_code, _headers = jira_0_with_http_info(opts)
      return data
    end

    # get all jira project
    # get all jira project
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<JiraProject>, Fixnum, Hash)>] Array<JiraProject> data, response status code and response headers
    def jira_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.jira_0 ..."
      end
      # resource path
      local_var_path = "/admin/v3/bug/config/jira/projects"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<JiraProject>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#jira_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get all jira project for given config
    # get all jira project for given config
    # @param [Hash] opts the optional parameters
    # @return [Array<JiraProject>]
    def jira_1(opts = {})
      data, _status_code, _headers = jira_1_with_http_info(opts)
      return data
    end

    # get all jira project for given config
    # get all jira project for given config
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<JiraProject>, Fixnum, Hash)>] Array<JiraProject> data, response status code and response headers
    def jira_1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.jira_1 ..."
      end
      # resource path
      local_var_path = "/admin/v3/bug/config/jira/{congfig_id}/projects"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<JiraProject>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#jira_1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get a jira project  details
    # get a jira project details
    # @param [Hash] opts the optional parameters
    # @return [JiraProject]
    def jira_2(opts = {})
      data, _status_code, _headers = jira_2_with_http_info(opts)
      return data
    end

    # get a jira project  details
    # get a jira project details
    # @param [Hash] opts the optional parameters
    # @return [Array<(JiraProject, Fixnum, Hash)>] JiraProject data, response status code and response headers
    def jira_2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.jira_2 ..."
      end
      # resource path
      local_var_path = "/admin/v3/bug/config/jira/projects/{jira_project_id}"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JiraProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#jira_2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create a jira config
    # create a jira config
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def jira_config(body, opts = {})
      data, _status_code, _headers = jira_config_with_http_info(body, opts)
      return data
    end

    # create a jira config
    # create a jira config
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def jira_config_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.jira_config ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.jira_config"
      end
      # resource path
      local_var_path = "/admin/v3/bug/config/jira"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#jira_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update a jira config
    # update a jira config
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [JiraConfig]
    def jira_config_0(payload, opts = {})
      data, _status_code, _headers = jira_config_0_with_http_info(payload, opts)
      return data
    end

    # update a jira config
    # update a jira config
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JiraConfig, Fixnum, Hash)>] JiraConfig data, response status code and response headers
    def jira_config_0_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.jira_config_0 ..."
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling DefaultApi.jira_config_0"
      end
      # resource path
      local_var_path = "/admin/v3/bug/config/jira/{jira_config_id}"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JiraConfig')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#jira_config_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update all projects for a jira config
    # update all projects for a jira config
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def jira_config_1(opts = {})
      data, _status_code, _headers = jira_config_1_with_http_info(opts)
      return data
    end

    # update all projects for a jira config
    # update all projects for a jira config
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def jira_config_1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.jira_config_1 ..."
      end
      # resource path
      local_var_path = "/admin/v3/bug/config/jira/{jira_config_id}"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#jira_config_1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create a jira issue
    # create a jira issue
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [JiraIssueResponse]
    def jira_issue(body, opts = {})
      data, _status_code, _headers = jira_issue_with_http_info(body, opts)
      return data
    end

    # create a jira issue
    # create a jira issue
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JiraIssueResponse, Fixnum, Hash)>] JiraIssueResponse data, response status code and response headers
    def jira_issue_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.jira_issue ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.jira_issue"
      end
      # resource path
      local_var_path = "/v3/bug/jira/{jira_project_id}/create"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JiraIssueResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#jira_issue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Project
    # Update Project from user interface
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def project(body, opts = {})
      data, _status_code, _headers = project_with_http_info(body, opts)
      return data
    end

    # Update Project
    # Update Project from user interface
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Fixnum, Hash)>] Project data, response status code and response headers
    def project_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.project ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.project"
      end
      # resource path
      local_var_path = "/v3/project/{project_id}"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Project')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
