=begin
#RobusTest Api

#RobusTest Apis

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient

  class Project
    attr_accessor :_id

    attr_accessor :name

    attr_accessor :org

    attr_accessor :os

    attr_accessor :icon64

    attr_accessor :type

    attr_accessor :url

    attr_accessor :bug_project

    attr_accessor :admin

    attr_accessor :users

    attr_accessor :test_c

    attr_accessor :active

    attr_accessor :is_universal

    attr_accessor :last

    attr_accessor :created

    attr_accessor :updated

    attr_accessor :update_by

    attr_accessor :created_by


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_id' => :'_id',
        :'name' => :'name',
        :'org' => :'org',
        :'os' => :'os',
        :'icon64' => :'icon64',
        :'type' => :'type',
        :'url' => :'url',
        :'bug_project' => :'bugProject',
        :'admin' => :'admin',
        :'users' => :'users',
        :'test_c' => :'test_c',
        :'active' => :'active',
        :'is_universal' => :'is_universal',
        :'last' => :'last',
        :'created' => :'created',
        :'updated' => :'updated',
        :'update_by' => :'update_by',
        :'created_by' => :'created_by'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'_id' => :'String',
        :'name' => :'String',
        :'org' => :'String',
        :'os' => :'String',
        :'icon64' => :'String',
        :'type' => :'String',
        :'url' => :'String',
        :'bug_project' => :'String',
        :'admin' => :'Array<String>',
        :'users' => :'Array<String>',
        :'test_c' => :'Float',
        :'active' => :'BOOLEAN',
        :'is_universal' => :'BOOLEAN',
        :'last' => :'String',
        :'created' => :'String',
        :'updated' => :'String',
        :'update_by' => :'String',
        :'created_by' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'_id')
        self._id = attributes[:'_id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'org')
        self.org = attributes[:'org']
      end

      if attributes.has_key?(:'os')
        self.os = attributes[:'os']
      end

      if attributes.has_key?(:'icon64')
        self.icon64 = attributes[:'icon64']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'bugProject')
        self.bug_project = attributes[:'bugProject']
      end

      if attributes.has_key?(:'admin')
        if (value = attributes[:'admin']).is_a?(Array)
          self.admin = value
        end
      end

      if attributes.has_key?(:'users')
        if (value = attributes[:'users']).is_a?(Array)
          self.users = value
        end
      end

      if attributes.has_key?(:'test_c')
        self.test_c = attributes[:'test_c']
      end

      if attributes.has_key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.has_key?(:'is_universal')
        self.is_universal = attributes[:'is_universal']
      end

      if attributes.has_key?(:'last')
        self.last = attributes[:'last']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'update_by')
        self.update_by = attributes[:'update_by']
      end

      if attributes.has_key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _id == o._id &&
          name == o.name &&
          org == o.org &&
          os == o.os &&
          icon64 == o.icon64 &&
          type == o.type &&
          url == o.url &&
          bug_project == o.bug_project &&
          admin == o.admin &&
          users == o.users &&
          test_c == o.test_c &&
          active == o.active &&
          is_universal == o.is_universal &&
          last == o.last &&
          created == o.created &&
          updated == o.updated &&
          update_by == o.update_by &&
          created_by == o.created_by
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [_id, name, org, os, icon64, type, url, bug_project, admin, users, test_c, active, is_universal, last, created, updated, update_by, created_by].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
