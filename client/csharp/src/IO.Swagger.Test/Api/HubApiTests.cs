/* 
 * RobusTest Hub
 *
 * RobusTest Hub Api [http://mobile.robustest.com:8085 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing HubApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class HubApiTests
    {
        private HubApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new HubApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of HubApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' HubApi
            //Assert.IsInstanceOfType(typeof(HubApi), instance, "instance is a HubApi");
        }

        
        /// <summary>
        /// Test DeviceCommandPost
        /// </summary>
        [Test]
        public void DeviceCommandPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Device5 device = null;
            //var response = instance.DeviceCommandPost(device);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test DeviceDelete
        /// </summary>
        [Test]
        public void DeviceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Device1 device = null;
            //var response = instance.DeviceDelete(device);
            //Assert.IsInstanceOf<Device> (response, "response is Device");
        }
        
        /// <summary>
        /// Test DevicePut
        /// </summary>
        [Test]
        public void DevicePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Device device = null;
            //var response = instance.DevicePut(device);
            //Assert.IsInstanceOf<Device> (response, "response is Device");
        }
        
        /// <summary>
        /// Test DeviceReverseDelete
        /// </summary>
        [Test]
        public void DeviceReverseDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Device3 device = null;
            //var response = instance.DeviceReverseDelete(device);
            //Assert.IsInstanceOf<Device> (response, "response is Device");
        }
        
        /// <summary>
        /// Test DeviceReversePut
        /// </summary>
        [Test]
        public void DeviceReversePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Device2 device = null;
            //var response = instance.DeviceReversePut(device);
            //Assert.IsInstanceOf<Device> (response, "response is Device");
        }
        
        /// <summary>
        /// Test DeviceShellPost
        /// </summary>
        [Test]
        public void DeviceShellPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Device4 device = null;
            //var response = instance.DeviceShellPost(device);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test Devices
        /// </summary>
        [Test]
        public void DevicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Devices();
            //Assert.IsInstanceOf<HubDevices> (response, "response is HubDevices");
        }
        
    }

}
