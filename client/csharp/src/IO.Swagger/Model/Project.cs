/* 
 * RobusTest Api
 *
 * RobusTest Apis
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Project
    /// </summary>
    [DataContract]
    public partial class Project :  IEquatable<Project>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Project" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Org">Org.</param>
        /// <param name="Os">Os.</param>
        /// <param name="Icon64">Icon64.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Url">Url.</param>
        /// <param name="BugProject">BugProject.</param>
        /// <param name="Admin">Admin.</param>
        /// <param name="Users">Users.</param>
        /// <param name="TestC">TestC.</param>
        /// <param name="Active">Active.</param>
        /// <param name="IsUniversal">IsUniversal.</param>
        /// <param name="Last">Last.</param>
        /// <param name="Created">Created.</param>
        /// <param name="Updated">Updated.</param>
        /// <param name="UpdateBy">UpdateBy.</param>
        /// <param name="CreatedBy">CreatedBy.</param>
        public Project(string Id = default(string), string Name = default(string), string Org = default(string), string Os = default(string), string Icon64 = default(string), string Type = default(string), string Url = default(string), string BugProject = default(string), List<string> Admin = default(List<string>), List<string> Users = default(List<string>), decimal? TestC = default(decimal?), bool? Active = default(bool?), bool? IsUniversal = default(bool?), string Last = default(string), string Created = default(string), string Updated = default(string), string UpdateBy = default(string), string CreatedBy = default(string))
        {
            this.Id = Id;
            this.Name = Name;
            this.Org = Org;
            this.Os = Os;
            this.Icon64 = Icon64;
            this.Type = Type;
            this.Url = Url;
            this.BugProject = BugProject;
            this.Admin = Admin;
            this.Users = Users;
            this.TestC = TestC;
            this.Active = Active;
            this.IsUniversal = IsUniversal;
            this.Last = Last;
            this.Created = Created;
            this.Updated = Updated;
            this.UpdateBy = UpdateBy;
            this.CreatedBy = CreatedBy;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Org
        /// </summary>
        [DataMember(Name="org", EmitDefaultValue=false)]
        public string Org { get; set; }

        /// <summary>
        /// Gets or Sets Os
        /// </summary>
        [DataMember(Name="os", EmitDefaultValue=false)]
        public string Os { get; set; }

        /// <summary>
        /// Gets or Sets Icon64
        /// </summary>
        [DataMember(Name="icon64", EmitDefaultValue=false)]
        public string Icon64 { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets BugProject
        /// </summary>
        [DataMember(Name="bugProject", EmitDefaultValue=false)]
        public string BugProject { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name="admin", EmitDefaultValue=false)]
        public List<string> Admin { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<string> Users { get; set; }

        /// <summary>
        /// Gets or Sets TestC
        /// </summary>
        [DataMember(Name="test_c", EmitDefaultValue=false)]
        public decimal? TestC { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets IsUniversal
        /// </summary>
        [DataMember(Name="is_universal", EmitDefaultValue=false)]
        public bool? IsUniversal { get; set; }

        /// <summary>
        /// Gets or Sets Last
        /// </summary>
        [DataMember(Name="last", EmitDefaultValue=false)]
        public string Last { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public string Updated { get; set; }

        /// <summary>
        /// Gets or Sets UpdateBy
        /// </summary>
        [DataMember(Name="update_by", EmitDefaultValue=false)]
        public string UpdateBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Project {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Org: ").Append(Org).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  Icon64: ").Append(Icon64).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  BugProject: ").Append(BugProject).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  TestC: ").Append(TestC).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  IsUniversal: ").Append(IsUniversal).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  UpdateBy: ").Append(UpdateBy).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Project);
        }

        /// <summary>
        /// Returns true if Project instances are equal
        /// </summary>
        /// <param name="input">Instance of Project to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Project input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Org == input.Org ||
                    (this.Org != null &&
                    this.Org.Equals(input.Org))
                ) && 
                (
                    this.Os == input.Os ||
                    (this.Os != null &&
                    this.Os.Equals(input.Os))
                ) && 
                (
                    this.Icon64 == input.Icon64 ||
                    (this.Icon64 != null &&
                    this.Icon64.Equals(input.Icon64))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.BugProject == input.BugProject ||
                    (this.BugProject != null &&
                    this.BugProject.Equals(input.BugProject))
                ) && 
                (
                    this.Admin == input.Admin ||
                    this.Admin != null &&
                    this.Admin.SequenceEqual(input.Admin)
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.TestC == input.TestC ||
                    (this.TestC != null &&
                    this.TestC.Equals(input.TestC))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.IsUniversal == input.IsUniversal ||
                    (this.IsUniversal != null &&
                    this.IsUniversal.Equals(input.IsUniversal))
                ) && 
                (
                    this.Last == input.Last ||
                    (this.Last != null &&
                    this.Last.Equals(input.Last))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.UpdateBy == input.UpdateBy ||
                    (this.UpdateBy != null &&
                    this.UpdateBy.Equals(input.UpdateBy))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Org != null)
                    hashCode = hashCode * 59 + this.Org.GetHashCode();
                if (this.Os != null)
                    hashCode = hashCode * 59 + this.Os.GetHashCode();
                if (this.Icon64 != null)
                    hashCode = hashCode * 59 + this.Icon64.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.BugProject != null)
                    hashCode = hashCode * 59 + this.BugProject.GetHashCode();
                if (this.Admin != null)
                    hashCode = hashCode * 59 + this.Admin.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.TestC != null)
                    hashCode = hashCode * 59 + this.TestC.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.IsUniversal != null)
                    hashCode = hashCode * 59 + this.IsUniversal.GetHashCode();
                if (this.Last != null)
                    hashCode = hashCode * 59 + this.Last.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.UpdateBy != null)
                    hashCode = hashCode * 59 + this.UpdateBy.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
