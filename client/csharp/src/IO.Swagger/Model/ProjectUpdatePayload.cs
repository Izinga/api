/* 
 * RobusTest Api
 *
 * RobusTest Apis
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProjectUpdatePayload
    /// </summary>
    [DataContract]
    public partial class ProjectUpdatePayload :  IEquatable<ProjectUpdatePayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectUpdatePayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectUpdatePayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectUpdatePayload" /> class.
        /// </summary>
        /// <param name="Active">Active (required).</param>
        /// <param name="BugProject">BugProject (required).</param>
        /// <param name="Users">Users (required).</param>
        /// <param name="Admin">Admin (required).</param>
        public ProjectUpdatePayload(bool? Active = default(bool?), string BugProject = default(string), List<string> Users = default(List<string>), List<string> Admin = default(List<string>))
        {
            // to ensure "Active" is required (not null)
            if (Active == null)
            {
                throw new InvalidDataException("Active is a required property for ProjectUpdatePayload and cannot be null");
            }
            else
            {
                this.Active = Active;
            }
            // to ensure "BugProject" is required (not null)
            if (BugProject == null)
            {
                throw new InvalidDataException("BugProject is a required property for ProjectUpdatePayload and cannot be null");
            }
            else
            {
                this.BugProject = BugProject;
            }
            // to ensure "Users" is required (not null)
            if (Users == null)
            {
                throw new InvalidDataException("Users is a required property for ProjectUpdatePayload and cannot be null");
            }
            else
            {
                this.Users = Users;
            }
            // to ensure "Admin" is required (not null)
            if (Admin == null)
            {
                throw new InvalidDataException("Admin is a required property for ProjectUpdatePayload and cannot be null");
            }
            else
            {
                this.Admin = Admin;
            }
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets BugProject
        /// </summary>
        [DataMember(Name="bugProject", EmitDefaultValue=false)]
        public string BugProject { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<string> Users { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name="admin", EmitDefaultValue=false)]
        public List<string> Admin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectUpdatePayload {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  BugProject: ").Append(BugProject).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectUpdatePayload);
        }

        /// <summary>
        /// Returns true if ProjectUpdatePayload instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectUpdatePayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectUpdatePayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.BugProject == input.BugProject ||
                    (this.BugProject != null &&
                    this.BugProject.Equals(input.BugProject))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.Admin == input.Admin ||
                    this.Admin != null &&
                    this.Admin.SequenceEqual(input.Admin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.BugProject != null)
                    hashCode = hashCode * 59 + this.BugProject.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.Admin != null)
                    hashCode = hashCode * 59 + this.Admin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
