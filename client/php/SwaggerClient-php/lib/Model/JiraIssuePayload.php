<?php
/**
 * JiraIssuePayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RobusTest Api
 *
 * RobusTest Apis
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * JiraIssuePayload Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JiraIssuePayload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'jiraIssuePayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'project_key' => 'string',
        'assingee_name' => 'string',
        'assingee_key' => 'string',
        'reporter_name' => 'string',
        'reporter_key' => 'string',
        'description' => 'string',
        'summary' => 'string',
        'type' => 'string',
        'attachements' => '\Swagger\Client\Model\JiraIssuePayloadAttachements[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'project_key' => null,
        'assingee_name' => null,
        'assingee_key' => null,
        'reporter_name' => null,
        'reporter_key' => null,
        'description' => null,
        'summary' => null,
        'type' => null,
        'attachements' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project_key' => 'projectKey',
        'assingee_name' => 'assingeeName',
        'assingee_key' => 'assingeeKey',
        'reporter_name' => 'reporterName',
        'reporter_key' => 'reporterKey',
        'description' => 'description',
        'summary' => 'summary',
        'type' => 'type',
        'attachements' => 'attachements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project_key' => 'setProjectKey',
        'assingee_name' => 'setAssingeeName',
        'assingee_key' => 'setAssingeeKey',
        'reporter_name' => 'setReporterName',
        'reporter_key' => 'setReporterKey',
        'description' => 'setDescription',
        'summary' => 'setSummary',
        'type' => 'setType',
        'attachements' => 'setAttachements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project_key' => 'getProjectKey',
        'assingee_name' => 'getAssingeeName',
        'assingee_key' => 'getAssingeeKey',
        'reporter_name' => 'getReporterName',
        'reporter_key' => 'getReporterKey',
        'description' => 'getDescription',
        'summary' => 'getSummary',
        'type' => 'getType',
        'attachements' => 'getAttachements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['project_key'] = isset($data['project_key']) ? $data['project_key'] : null;
        $this->container['assingee_name'] = isset($data['assingee_name']) ? $data['assingee_name'] : null;
        $this->container['assingee_key'] = isset($data['assingee_key']) ? $data['assingee_key'] : null;
        $this->container['reporter_name'] = isset($data['reporter_name']) ? $data['reporter_name'] : null;
        $this->container['reporter_key'] = isset($data['reporter_key']) ? $data['reporter_key'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['attachements'] = isset($data['attachements']) ? $data['attachements'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['project_key'] === null) {
            $invalidProperties[] = "'project_key' can't be null";
        }
        if ($this->container['assingee_name'] === null) {
            $invalidProperties[] = "'assingee_name' can't be null";
        }
        if ($this->container['assingee_key'] === null) {
            $invalidProperties[] = "'assingee_key' can't be null";
        }
        if ($this->container['reporter_name'] === null) {
            $invalidProperties[] = "'reporter_name' can't be null";
        }
        if ($this->container['reporter_key'] === null) {
            $invalidProperties[] = "'reporter_key' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['summary'] === null) {
            $invalidProperties[] = "'summary' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['attachements'] === null) {
            $invalidProperties[] = "'attachements' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['project_key'] === null) {
            return false;
        }
        if ($this->container['assingee_name'] === null) {
            return false;
        }
        if ($this->container['assingee_key'] === null) {
            return false;
        }
        if ($this->container['reporter_name'] === null) {
            return false;
        }
        if ($this->container['reporter_key'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['summary'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['attachements'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets project_key
     *
     * @return string
     */
    public function getProjectKey()
    {
        return $this->container['project_key'];
    }

    /**
     * Sets project_key
     *
     * @param string $project_key project_key
     *
     * @return $this
     */
    public function setProjectKey($project_key)
    {
        $this->container['project_key'] = $project_key;

        return $this;
    }

    /**
     * Gets assingee_name
     *
     * @return string
     */
    public function getAssingeeName()
    {
        return $this->container['assingee_name'];
    }

    /**
     * Sets assingee_name
     *
     * @param string $assingee_name assingee_name
     *
     * @return $this
     */
    public function setAssingeeName($assingee_name)
    {
        $this->container['assingee_name'] = $assingee_name;

        return $this;
    }

    /**
     * Gets assingee_key
     *
     * @return string
     */
    public function getAssingeeKey()
    {
        return $this->container['assingee_key'];
    }

    /**
     * Sets assingee_key
     *
     * @param string $assingee_key assingee_key
     *
     * @return $this
     */
    public function setAssingeeKey($assingee_key)
    {
        $this->container['assingee_key'] = $assingee_key;

        return $this;
    }

    /**
     * Gets reporter_name
     *
     * @return string
     */
    public function getReporterName()
    {
        return $this->container['reporter_name'];
    }

    /**
     * Sets reporter_name
     *
     * @param string $reporter_name reporter_name
     *
     * @return $this
     */
    public function setReporterName($reporter_name)
    {
        $this->container['reporter_name'] = $reporter_name;

        return $this;
    }

    /**
     * Gets reporter_key
     *
     * @return string
     */
    public function getReporterKey()
    {
        return $this->container['reporter_key'];
    }

    /**
     * Sets reporter_key
     *
     * @param string $reporter_key reporter_key
     *
     * @return $this
     */
    public function setReporterKey($reporter_key)
    {
        $this->container['reporter_key'] = $reporter_key;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets attachements
     *
     * @return \Swagger\Client\Model\JiraIssuePayloadAttachements[]
     */
    public function getAttachements()
    {
        return $this->container['attachements'];
    }

    /**
     * Sets attachements
     *
     * @param \Swagger\Client\Model\JiraIssuePayloadAttachements[] $attachements attachements
     *
     * @return $this
     */
    public function setAttachements($attachements)
    {
        $this->container['attachements'] = $attachements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


