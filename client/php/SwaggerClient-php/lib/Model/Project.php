<?php
/**
 * Project
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RobusTest Api
 *
 * RobusTest Apis
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Project Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Project implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'project';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'name' => 'string',
        'org' => 'string',
        'os' => 'string',
        'icon64' => 'string',
        'type' => 'string',
        'url' => 'string',
        'bug_project' => 'string',
        'admin' => 'string[]',
        'users' => 'string[]',
        'test_c' => 'float',
        'active' => 'bool',
        'is_universal' => 'bool',
        'last' => 'string',
        'created' => 'string',
        'updated' => 'string',
        'update_by' => 'string',
        'created_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'name' => null,
        'org' => null,
        'os' => null,
        'icon64' => null,
        'type' => null,
        'url' => null,
        'bug_project' => null,
        'admin' => null,
        'users' => null,
        'test_c' => null,
        'active' => null,
        'is_universal' => null,
        'last' => null,
        'created' => null,
        'updated' => null,
        'update_by' => null,
        'created_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'name' => 'name',
        'org' => 'org',
        'os' => 'os',
        'icon64' => 'icon64',
        'type' => 'type',
        'url' => 'url',
        'bug_project' => 'bugProject',
        'admin' => 'admin',
        'users' => 'users',
        'test_c' => 'test_c',
        'active' => 'active',
        'is_universal' => 'is_universal',
        'last' => 'last',
        'created' => 'created',
        'updated' => 'updated',
        'update_by' => 'update_by',
        'created_by' => 'created_by'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'name' => 'setName',
        'org' => 'setOrg',
        'os' => 'setOs',
        'icon64' => 'setIcon64',
        'type' => 'setType',
        'url' => 'setUrl',
        'bug_project' => 'setBugProject',
        'admin' => 'setAdmin',
        'users' => 'setUsers',
        'test_c' => 'setTestC',
        'active' => 'setActive',
        'is_universal' => 'setIsUniversal',
        'last' => 'setLast',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'update_by' => 'setUpdateBy',
        'created_by' => 'setCreatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'name' => 'getName',
        'org' => 'getOrg',
        'os' => 'getOs',
        'icon64' => 'getIcon64',
        'type' => 'getType',
        'url' => 'getUrl',
        'bug_project' => 'getBugProject',
        'admin' => 'getAdmin',
        'users' => 'getUsers',
        'test_c' => 'getTestC',
        'active' => 'getActive',
        'is_universal' => 'getIsUniversal',
        'last' => 'getLast',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'update_by' => 'getUpdateBy',
        'created_by' => 'getCreatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['org'] = isset($data['org']) ? $data['org'] : null;
        $this->container['os'] = isset($data['os']) ? $data['os'] : null;
        $this->container['icon64'] = isset($data['icon64']) ? $data['icon64'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['bug_project'] = isset($data['bug_project']) ? $data['bug_project'] : null;
        $this->container['admin'] = isset($data['admin']) ? $data['admin'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['test_c'] = isset($data['test_c']) ? $data['test_c'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['is_universal'] = isset($data['is_universal']) ? $data['is_universal'] : null;
        $this->container['last'] = isset($data['last']) ? $data['last'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['update_by'] = isset($data['update_by']) ? $data['update_by'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets org
     *
     * @return string
     */
    public function getOrg()
    {
        return $this->container['org'];
    }

    /**
     * Sets org
     *
     * @param string $org org
     *
     * @return $this
     */
    public function setOrg($org)
    {
        $this->container['org'] = $org;

        return $this;
    }

    /**
     * Gets os
     *
     * @return string
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param string $os os
     *
     * @return $this
     */
    public function setOs($os)
    {
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets icon64
     *
     * @return string
     */
    public function getIcon64()
    {
        return $this->container['icon64'];
    }

    /**
     * Sets icon64
     *
     * @param string $icon64 icon64
     *
     * @return $this
     */
    public function setIcon64($icon64)
    {
        $this->container['icon64'] = $icon64;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets bug_project
     *
     * @return string
     */
    public function getBugProject()
    {
        return $this->container['bug_project'];
    }

    /**
     * Sets bug_project
     *
     * @param string $bug_project bug_project
     *
     * @return $this
     */
    public function setBugProject($bug_project)
    {
        $this->container['bug_project'] = $bug_project;

        return $this;
    }

    /**
     * Gets admin
     *
     * @return string[]
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param string[] $admin admin
     *
     * @return $this
     */
    public function setAdmin($admin)
    {
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets users
     *
     * @return string[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param string[] $users users
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets test_c
     *
     * @return float
     */
    public function getTestC()
    {
        return $this->container['test_c'];
    }

    /**
     * Sets test_c
     *
     * @param float $test_c test_c
     *
     * @return $this
     */
    public function setTestC($test_c)
    {
        $this->container['test_c'] = $test_c;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets is_universal
     *
     * @return bool
     */
    public function getIsUniversal()
    {
        return $this->container['is_universal'];
    }

    /**
     * Sets is_universal
     *
     * @param bool $is_universal is_universal
     *
     * @return $this
     */
    public function setIsUniversal($is_universal)
    {
        $this->container['is_universal'] = $is_universal;

        return $this;
    }

    /**
     * Gets last
     *
     * @return string
     */
    public function getLast()
    {
        return $this->container['last'];
    }

    /**
     * Sets last
     *
     * @param string $last last
     *
     * @return $this
     */
    public function setLast($last)
    {
        $this->container['last'] = $last;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return string
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param string $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets update_by
     *
     * @return string
     */
    public function getUpdateBy()
    {
        return $this->container['update_by'];
    }

    /**
     * Sets update_by
     *
     * @param string $update_by update_by
     *
     * @return $this
     */
    public function setUpdateBy($update_by)
    {
        $this->container['update_by'] = $update_by;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


