/**
 * RobusTest Api
 * RobusTest Apis
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RobusTestApi);
  }
}(this, function(expect, RobusTestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RobusTestApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('bug', function() {
      it('should call bug successfully', function(done) {
        //uncomment below and update the code to test bug
        //instance.bug(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jira', function() {
      it('should call jira successfully', function(done) {
        //uncomment below and update the code to test jira
        //instance.jira(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jiraConfig', function() {
      it('should call jiraConfig successfully', function(done) {
        //uncomment below and update the code to test jiraConfig
        //instance.jiraConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jiraConfig_0', function() {
      it('should call jiraConfig_0 successfully', function(done) {
        //uncomment below and update the code to test jiraConfig_0
        //instance.jiraConfig_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jiraConfig_1', function() {
      it('should call jiraConfig_1 successfully', function(done) {
        //uncomment below and update the code to test jiraConfig_1
        //instance.jiraConfig_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jiraIssue', function() {
      it('should call jiraIssue successfully', function(done) {
        //uncomment below and update the code to test jiraIssue
        //instance.jiraIssue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jira_0', function() {
      it('should call jira_0 successfully', function(done) {
        //uncomment below and update the code to test jira_0
        //instance.jira_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jira_1', function() {
      it('should call jira_1 successfully', function(done) {
        //uncomment below and update the code to test jira_1
        //instance.jira_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jira_2', function() {
      it('should call jira_2 successfully', function(done) {
        //uncomment below and update the code to test jira_2
        //instance.jira_2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('project', function() {
      it('should call project successfully', function(done) {
        //uncomment below and update the code to test project
        //instance.project(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
