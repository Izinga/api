# coding: utf-8

"""
    RobusTest Api

    RobusTest Apis  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JiraConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'source': 'str',
        'type': 'str',
        'url': 'str',
        'name': 'str',
        'user': 'str',
        'password': 'str',
        'created_by': 'str',
        'updated': 'str',
        'created': 'str'
    }

    attribute_map = {
        'id': '_id',
        'source': 'source',
        'type': 'type',
        'url': 'url',
        'name': 'name',
        'user': 'user',
        'password': 'password',
        'created_by': 'createdBy',
        'updated': 'updated',
        'created': 'created'
    }

    def __init__(self, id=None, source=None, type=None, url=None, name=None, user=None, password=None, created_by=None, updated=None, created=None):  # noqa: E501
        """JiraConfig - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._source = None
        self._type = None
        self._url = None
        self._name = None
        self._user = None
        self._password = None
        self._created_by = None
        self._updated = None
        self._created = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if source is not None:
            self.source = source
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if name is not None:
            self.name = name
        if user is not None:
            self.user = user
        if password is not None:
            self.password = password
        if created_by is not None:
            self.created_by = created_by
        if updated is not None:
            self.updated = updated
        if created is not None:
            self.created = created

    @property
    def id(self):
        """Gets the id of this JiraConfig.  # noqa: E501


        :return: The id of this JiraConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JiraConfig.


        :param id: The id of this JiraConfig.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def source(self):
        """Gets the source of this JiraConfig.  # noqa: E501


        :return: The source of this JiraConfig.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this JiraConfig.


        :param source: The source of this JiraConfig.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def type(self):
        """Gets the type of this JiraConfig.  # noqa: E501


        :return: The type of this JiraConfig.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JiraConfig.


        :param type: The type of this JiraConfig.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this JiraConfig.  # noqa: E501


        :return: The url of this JiraConfig.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this JiraConfig.


        :param url: The url of this JiraConfig.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def name(self):
        """Gets the name of this JiraConfig.  # noqa: E501


        :return: The name of this JiraConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JiraConfig.


        :param name: The name of this JiraConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user(self):
        """Gets the user of this JiraConfig.  # noqa: E501


        :return: The user of this JiraConfig.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this JiraConfig.


        :param user: The user of this JiraConfig.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def password(self):
        """Gets the password of this JiraConfig.  # noqa: E501


        :return: The password of this JiraConfig.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this JiraConfig.


        :param password: The password of this JiraConfig.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def created_by(self):
        """Gets the created_by of this JiraConfig.  # noqa: E501


        :return: The created_by of this JiraConfig.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this JiraConfig.


        :param created_by: The created_by of this JiraConfig.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def updated(self):
        """Gets the updated of this JiraConfig.  # noqa: E501


        :return: The updated of this JiraConfig.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this JiraConfig.


        :param updated: The updated of this JiraConfig.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def created(self):
        """Gets the created of this JiraConfig.  # noqa: E501


        :return: The created of this JiraConfig.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this JiraConfig.


        :param created: The created of this JiraConfig.  # noqa: E501
        :type: str
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
