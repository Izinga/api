# coding: utf-8

"""


    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Device(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'device_name': 'str',
        'platform_version': 'str',
        'reserve_key': 'str'
    }

    attribute_map = {
        'id': '_id',
        'device_name': 'deviceName',
        'platform_version': 'platformVersion',
        'reserve_key': 'reserveKey'
    }

    def __init__(self, id=None, device_name=None, platform_version=None, reserve_key=None):  # noqa: E501
        """Device - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._device_name = None
        self._platform_version = None
        self._reserve_key = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if device_name is not None:
            self.device_name = device_name
        if platform_version is not None:
            self.platform_version = platform_version
        if reserve_key is not None:
            self.reserve_key = reserve_key

    @property
    def id(self):
        """Gets the id of this Device.  # noqa: E501

        device id  # noqa: E501

        :return: The id of this Device.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.

        device id  # noqa: E501

        :param id: The id of this Device.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def device_name(self):
        """Gets the device_name of this Device.  # noqa: E501


        :return: The device_name of this Device.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this Device.


        :param device_name: The device_name of this Device.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def platform_version(self):
        """Gets the platform_version of this Device.  # noqa: E501


        :return: The platform_version of this Device.  # noqa: E501
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this Device.


        :param platform_version: The platform_version of this Device.  # noqa: E501
        :type: str
        """

        self._platform_version = platform_version

    @property
    def reserve_key(self):
        """Gets the reserve_key of this Device.  # noqa: E501


        :return: The reserve_key of this Device.  # noqa: E501
        :rtype: str
        """
        return self._reserve_key

    @reserve_key.setter
    def reserve_key(self, reserve_key):
        """Sets the reserve_key of this Device.


        :param reserve_key: The reserve_key of this Device.  # noqa: E501
        :type: str
        """

        self._reserve_key = reserve_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Device):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
