# coding: utf-8

"""
    RobusTest Hub

    RobusTest Hub Api [http://mobile.robustest.com:8085 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Device(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, device=None, device_name=None, platform_version=None, reverse_key=None):
        """
        Device - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device': 'str',
            'device_name': 'str',
            'platform_version': 'str',
            'reverse_key': 'str'
        }

        self.attribute_map = {
            'device': 'device',
            'device_name': 'deviceName',
            'platform_version': 'platformVersion',
            'reverse_key': 'reverseKey'
        }

        self._device = device
        self._device_name = device_name
        self._platform_version = platform_version
        self._reverse_key = reverse_key

    @property
    def device(self):
        """
        Gets the device of this Device.
        device id

        :return: The device of this Device.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this Device.
        device id

        :param device: The device of this Device.
        :type: str
        """

        self._device = device

    @property
    def device_name(self):
        """
        Gets the device_name of this Device.

        :return: The device_name of this Device.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """
        Sets the device_name of this Device.

        :param device_name: The device_name of this Device.
        :type: str
        """

        self._device_name = device_name

    @property
    def platform_version(self):
        """
        Gets the platform_version of this Device.

        :return: The platform_version of this Device.
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """
        Sets the platform_version of this Device.

        :param platform_version: The platform_version of this Device.
        :type: str
        """

        self._platform_version = platform_version

    @property
    def reverse_key(self):
        """
        Gets the reverse_key of this Device.

        :return: The reverse_key of this Device.
        :rtype: str
        """
        return self._reverse_key

    @reverse_key.setter
    def reverse_key(self, reverse_key):
        """
        Sets the reverse_key of this Device.

        :param reverse_key: The reverse_key of this Device.
        :type: str
        """

        self._reverse_key = reverse_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Device):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
