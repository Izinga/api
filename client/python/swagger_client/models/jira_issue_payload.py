# coding: utf-8

"""
    RobusTest Api

    RobusTest Apis  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.jira_issue_payload_attachements import JiraIssuePayloadAttachements  # noqa: F401,E501


class JiraIssuePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_key': 'str',
        'assingee_name': 'str',
        'assingee_key': 'str',
        'reporter_name': 'str',
        'reporter_key': 'str',
        'description': 'str',
        'summary': 'str',
        'type': 'str',
        'attachements': 'list[JiraIssuePayloadAttachements]'
    }

    attribute_map = {
        'project_key': 'projectKey',
        'assingee_name': 'assingeeName',
        'assingee_key': 'assingeeKey',
        'reporter_name': 'reporterName',
        'reporter_key': 'reporterKey',
        'description': 'description',
        'summary': 'summary',
        'type': 'type',
        'attachements': 'attachements'
    }

    def __init__(self, project_key=None, assingee_name=None, assingee_key=None, reporter_name=None, reporter_key=None, description=None, summary=None, type=None, attachements=None):  # noqa: E501
        """JiraIssuePayload - a model defined in Swagger"""  # noqa: E501

        self._project_key = None
        self._assingee_name = None
        self._assingee_key = None
        self._reporter_name = None
        self._reporter_key = None
        self._description = None
        self._summary = None
        self._type = None
        self._attachements = None
        self.discriminator = None

        self.project_key = project_key
        self.assingee_name = assingee_name
        self.assingee_key = assingee_key
        self.reporter_name = reporter_name
        self.reporter_key = reporter_key
        self.description = description
        self.summary = summary
        self.type = type
        self.attachements = attachements

    @property
    def project_key(self):
        """Gets the project_key of this JiraIssuePayload.  # noqa: E501


        :return: The project_key of this JiraIssuePayload.  # noqa: E501
        :rtype: str
        """
        return self._project_key

    @project_key.setter
    def project_key(self, project_key):
        """Sets the project_key of this JiraIssuePayload.


        :param project_key: The project_key of this JiraIssuePayload.  # noqa: E501
        :type: str
        """
        if project_key is None:
            raise ValueError("Invalid value for `project_key`, must not be `None`")  # noqa: E501

        self._project_key = project_key

    @property
    def assingee_name(self):
        """Gets the assingee_name of this JiraIssuePayload.  # noqa: E501


        :return: The assingee_name of this JiraIssuePayload.  # noqa: E501
        :rtype: str
        """
        return self._assingee_name

    @assingee_name.setter
    def assingee_name(self, assingee_name):
        """Sets the assingee_name of this JiraIssuePayload.


        :param assingee_name: The assingee_name of this JiraIssuePayload.  # noqa: E501
        :type: str
        """
        if assingee_name is None:
            raise ValueError("Invalid value for `assingee_name`, must not be `None`")  # noqa: E501

        self._assingee_name = assingee_name

    @property
    def assingee_key(self):
        """Gets the assingee_key of this JiraIssuePayload.  # noqa: E501


        :return: The assingee_key of this JiraIssuePayload.  # noqa: E501
        :rtype: str
        """
        return self._assingee_key

    @assingee_key.setter
    def assingee_key(self, assingee_key):
        """Sets the assingee_key of this JiraIssuePayload.


        :param assingee_key: The assingee_key of this JiraIssuePayload.  # noqa: E501
        :type: str
        """
        if assingee_key is None:
            raise ValueError("Invalid value for `assingee_key`, must not be `None`")  # noqa: E501

        self._assingee_key = assingee_key

    @property
    def reporter_name(self):
        """Gets the reporter_name of this JiraIssuePayload.  # noqa: E501


        :return: The reporter_name of this JiraIssuePayload.  # noqa: E501
        :rtype: str
        """
        return self._reporter_name

    @reporter_name.setter
    def reporter_name(self, reporter_name):
        """Sets the reporter_name of this JiraIssuePayload.


        :param reporter_name: The reporter_name of this JiraIssuePayload.  # noqa: E501
        :type: str
        """
        if reporter_name is None:
            raise ValueError("Invalid value for `reporter_name`, must not be `None`")  # noqa: E501

        self._reporter_name = reporter_name

    @property
    def reporter_key(self):
        """Gets the reporter_key of this JiraIssuePayload.  # noqa: E501


        :return: The reporter_key of this JiraIssuePayload.  # noqa: E501
        :rtype: str
        """
        return self._reporter_key

    @reporter_key.setter
    def reporter_key(self, reporter_key):
        """Sets the reporter_key of this JiraIssuePayload.


        :param reporter_key: The reporter_key of this JiraIssuePayload.  # noqa: E501
        :type: str
        """
        if reporter_key is None:
            raise ValueError("Invalid value for `reporter_key`, must not be `None`")  # noqa: E501

        self._reporter_key = reporter_key

    @property
    def description(self):
        """Gets the description of this JiraIssuePayload.  # noqa: E501


        :return: The description of this JiraIssuePayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JiraIssuePayload.


        :param description: The description of this JiraIssuePayload.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def summary(self):
        """Gets the summary of this JiraIssuePayload.  # noqa: E501


        :return: The summary of this JiraIssuePayload.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this JiraIssuePayload.


        :param summary: The summary of this JiraIssuePayload.  # noqa: E501
        :type: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501

        self._summary = summary

    @property
    def type(self):
        """Gets the type of this JiraIssuePayload.  # noqa: E501


        :return: The type of this JiraIssuePayload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JiraIssuePayload.


        :param type: The type of this JiraIssuePayload.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def attachements(self):
        """Gets the attachements of this JiraIssuePayload.  # noqa: E501


        :return: The attachements of this JiraIssuePayload.  # noqa: E501
        :rtype: list[JiraIssuePayloadAttachements]
        """
        return self._attachements

    @attachements.setter
    def attachements(self, attachements):
        """Sets the attachements of this JiraIssuePayload.


        :param attachements: The attachements of this JiraIssuePayload.  # noqa: E501
        :type: list[JiraIssuePayloadAttachements]
        """
        if attachements is None:
            raise ValueError("Invalid value for `attachements`, must not be `None`")  # noqa: E501

        self._attachements = attachements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraIssuePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
