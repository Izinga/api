# coding: utf-8

"""


    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Testsuite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'desc': 'str',
        'project': 'str',
        'created_by': 'str',
        'updated_by': 'str'
    }

    attribute_map = {
        'id': '_id',
        'name': 'name',
        'desc': 'desc',
        'project': 'project',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy'
    }

    def __init__(self, id=None, name=None, desc=None, project=None, created_by=None, updated_by=None):  # noqa: E501
        """Testsuite - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._desc = None
        self._project = None
        self._created_by = None
        self._updated_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if desc is not None:
            self.desc = desc
        if project is not None:
            self.project = project
        if created_by is not None:
            self.created_by = created_by
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def id(self):
        """Gets the id of this Testsuite.  # noqa: E501

        Test suite ID  # noqa: E501

        :return: The id of this Testsuite.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Testsuite.

        Test suite ID  # noqa: E501

        :param id: The id of this Testsuite.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Testsuite.  # noqa: E501

        Test suite  Name  # noqa: E501

        :return: The name of this Testsuite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Testsuite.

        Test suite  Name  # noqa: E501

        :param name: The name of this Testsuite.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def desc(self):
        """Gets the desc of this Testsuite.  # noqa: E501

        Test suite  description  # noqa: E501

        :return: The desc of this Testsuite.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Testsuite.

        Test suite  description  # noqa: E501

        :param desc: The desc of this Testsuite.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def project(self):
        """Gets the project of this Testsuite.  # noqa: E501

        Test suite  project id  # noqa: E501

        :return: The project of this Testsuite.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Testsuite.

        Test suite  project id  # noqa: E501

        :param project: The project of this Testsuite.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def created_by(self):
        """Gets the created_by of this Testsuite.  # noqa: E501

        User who created test suite  # noqa: E501

        :return: The created_by of this Testsuite.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Testsuite.

        User who created test suite  # noqa: E501

        :param created_by: The created_by of this Testsuite.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this Testsuite.  # noqa: E501

        User who uodated test suite  # noqa: E501

        :return: The updated_by of this Testsuite.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Testsuite.

        User who uodated test suite  # noqa: E501

        :param updated_by: The updated_by of this Testsuite.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Testsuite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
