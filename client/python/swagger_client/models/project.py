# coding: utf-8

"""
    RobusTest Api

    RobusTest Apis  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'org': 'str',
        'os': 'str',
        'icon64': 'str',
        'type': 'str',
        'url': 'str',
        'bug_project': 'str',
        'admin': 'list[str]',
        'users': 'list[str]',
        'test_c': 'float',
        'active': 'bool',
        'is_universal': 'bool',
        'last': 'str',
        'created': 'str',
        'updated': 'str',
        'update_by': 'str',
        'created_by': 'str'
    }

    attribute_map = {
        'id': '_id',
        'name': 'name',
        'org': 'org',
        'os': 'os',
        'icon64': 'icon64',
        'type': 'type',
        'url': 'url',
        'bug_project': 'bugProject',
        'admin': 'admin',
        'users': 'users',
        'test_c': 'test_c',
        'active': 'active',
        'is_universal': 'is_universal',
        'last': 'last',
        'created': 'created',
        'updated': 'updated',
        'update_by': 'update_by',
        'created_by': 'created_by'
    }

    def __init__(self, id=None, name=None, org=None, os=None, icon64=None, type=None, url=None, bug_project=None, admin=None, users=None, test_c=None, active=None, is_universal=None, last=None, created=None, updated=None, update_by=None, created_by=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._org = None
        self._os = None
        self._icon64 = None
        self._type = None
        self._url = None
        self._bug_project = None
        self._admin = None
        self._users = None
        self._test_c = None
        self._active = None
        self._is_universal = None
        self._last = None
        self._created = None
        self._updated = None
        self._update_by = None
        self._created_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if org is not None:
            self.org = org
        if os is not None:
            self.os = os
        if icon64 is not None:
            self.icon64 = icon64
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if bug_project is not None:
            self.bug_project = bug_project
        if admin is not None:
            self.admin = admin
        if users is not None:
            self.users = users
        if test_c is not None:
            self.test_c = test_c
        if active is not None:
            self.active = active
        if is_universal is not None:
            self.is_universal = is_universal
        if last is not None:
            self.last = last
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if update_by is not None:
            self.update_by = update_by
        if created_by is not None:
            self.created_by = created_by

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org(self):
        """Gets the org of this Project.  # noqa: E501


        :return: The org of this Project.  # noqa: E501
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Project.


        :param org: The org of this Project.  # noqa: E501
        :type: str
        """

        self._org = org

    @property
    def os(self):
        """Gets the os of this Project.  # noqa: E501


        :return: The os of this Project.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Project.


        :param os: The os of this Project.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def icon64(self):
        """Gets the icon64 of this Project.  # noqa: E501


        :return: The icon64 of this Project.  # noqa: E501
        :rtype: str
        """
        return self._icon64

    @icon64.setter
    def icon64(self, icon64):
        """Sets the icon64 of this Project.


        :param icon64: The icon64 of this Project.  # noqa: E501
        :type: str
        """

        self._icon64 = icon64

    @property
    def type(self):
        """Gets the type of this Project.  # noqa: E501


        :return: The type of this Project.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Project.


        :param type: The type of this Project.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this Project.  # noqa: E501


        :return: The url of this Project.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Project.


        :param url: The url of this Project.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def bug_project(self):
        """Gets the bug_project of this Project.  # noqa: E501


        :return: The bug_project of this Project.  # noqa: E501
        :rtype: str
        """
        return self._bug_project

    @bug_project.setter
    def bug_project(self, bug_project):
        """Sets the bug_project of this Project.


        :param bug_project: The bug_project of this Project.  # noqa: E501
        :type: str
        """

        self._bug_project = bug_project

    @property
    def admin(self):
        """Gets the admin of this Project.  # noqa: E501


        :return: The admin of this Project.  # noqa: E501
        :rtype: list[str]
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this Project.


        :param admin: The admin of this Project.  # noqa: E501
        :type: list[str]
        """

        self._admin = admin

    @property
    def users(self):
        """Gets the users of this Project.  # noqa: E501


        :return: The users of this Project.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Project.


        :param users: The users of this Project.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    @property
    def test_c(self):
        """Gets the test_c of this Project.  # noqa: E501


        :return: The test_c of this Project.  # noqa: E501
        :rtype: float
        """
        return self._test_c

    @test_c.setter
    def test_c(self, test_c):
        """Sets the test_c of this Project.


        :param test_c: The test_c of this Project.  # noqa: E501
        :type: float
        """

        self._test_c = test_c

    @property
    def active(self):
        """Gets the active of this Project.  # noqa: E501


        :return: The active of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Project.


        :param active: The active of this Project.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def is_universal(self):
        """Gets the is_universal of this Project.  # noqa: E501


        :return: The is_universal of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._is_universal

    @is_universal.setter
    def is_universal(self, is_universal):
        """Sets the is_universal of this Project.


        :param is_universal: The is_universal of this Project.  # noqa: E501
        :type: bool
        """

        self._is_universal = is_universal

    @property
    def last(self):
        """Gets the last of this Project.  # noqa: E501


        :return: The last of this Project.  # noqa: E501
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this Project.


        :param last: The last of this Project.  # noqa: E501
        :type: str
        """

        self._last = last

    @property
    def created(self):
        """Gets the created of this Project.  # noqa: E501


        :return: The created of this Project.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Project.


        :param created: The created of this Project.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Project.  # noqa: E501


        :return: The updated of this Project.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Project.


        :param updated: The updated of this Project.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def update_by(self):
        """Gets the update_by of this Project.  # noqa: E501


        :return: The update_by of this Project.  # noqa: E501
        :rtype: str
        """
        return self._update_by

    @update_by.setter
    def update_by(self, update_by):
        """Sets the update_by of this Project.


        :param update_by: The update_by of this Project.  # noqa: E501
        :type: str
        """

        self._update_by = update_by

    @property
    def created_by(self):
        """Gets the created_by of this Project.  # noqa: E501


        :return: The created_by of this Project.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Project.


        :param created_by: The created_by of this Project.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
