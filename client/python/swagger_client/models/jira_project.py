# coding: utf-8

"""
    RobusTest Api

    RobusTest Apis  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.jira_project_component import JiraProjectComponent  # noqa: F401,E501
from swagger_client.models.jira_project_users import JiraProjectUsers  # noqa: F401,E501


class JiraProject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'source': 'str',
        'key': 'str',
        'id': 'str',
        'name': 'str',
        'desc': 'str',
        'users': 'list[JiraProjectUsers]',
        'type': 'str',
        'component': 'list[JiraProjectComponent]',
        'updated': 'str',
        'created': 'str'
    }

    attribute_map = {
        'id': '_id',
        'source': 'source',
        'key': 'key',
        'id': 'id',
        'name': 'name',
        'desc': 'desc',
        'users': 'users',
        'type': 'type',
        'component': 'component',
        'updated': 'updated',
        'created': 'created'
    }

    def __init__(self, id=None, source=None, key=None, id=None, name=None, desc=None, users=None, type=None, component=None, updated=None, created=None):  # noqa: E501
        """JiraProject - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._source = None
        self._key = None
        self._id = None
        self._name = None
        self._desc = None
        self._users = None
        self._type = None
        self._component = None
        self._updated = None
        self._created = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if source is not None:
            self.source = source
        if key is not None:
            self.key = key
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if desc is not None:
            self.desc = desc
        if users is not None:
            self.users = users
        if type is not None:
            self.type = type
        if component is not None:
            self.component = component
        if updated is not None:
            self.updated = updated
        if created is not None:
            self.created = created

    @property
    def id(self):
        """Gets the id of this JiraProject.  # noqa: E501


        :return: The id of this JiraProject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JiraProject.


        :param id: The id of this JiraProject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def source(self):
        """Gets the source of this JiraProject.  # noqa: E501


        :return: The source of this JiraProject.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this JiraProject.


        :param source: The source of this JiraProject.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def key(self):
        """Gets the key of this JiraProject.  # noqa: E501


        :return: The key of this JiraProject.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this JiraProject.


        :param key: The key of this JiraProject.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def id(self):
        """Gets the id of this JiraProject.  # noqa: E501


        :return: The id of this JiraProject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JiraProject.


        :param id: The id of this JiraProject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this JiraProject.  # noqa: E501


        :return: The name of this JiraProject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JiraProject.


        :param name: The name of this JiraProject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def desc(self):
        """Gets the desc of this JiraProject.  # noqa: E501


        :return: The desc of this JiraProject.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this JiraProject.


        :param desc: The desc of this JiraProject.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def users(self):
        """Gets the users of this JiraProject.  # noqa: E501


        :return: The users of this JiraProject.  # noqa: E501
        :rtype: list[JiraProjectUsers]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this JiraProject.


        :param users: The users of this JiraProject.  # noqa: E501
        :type: list[JiraProjectUsers]
        """

        self._users = users

    @property
    def type(self):
        """Gets the type of this JiraProject.  # noqa: E501


        :return: The type of this JiraProject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JiraProject.


        :param type: The type of this JiraProject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def component(self):
        """Gets the component of this JiraProject.  # noqa: E501


        :return: The component of this JiraProject.  # noqa: E501
        :rtype: list[JiraProjectComponent]
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this JiraProject.


        :param component: The component of this JiraProject.  # noqa: E501
        :type: list[JiraProjectComponent]
        """

        self._component = component

    @property
    def updated(self):
        """Gets the updated of this JiraProject.  # noqa: E501


        :return: The updated of this JiraProject.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this JiraProject.


        :param updated: The updated of this JiraProject.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def created(self):
        """Gets the created of this JiraProject.  # noqa: E501


        :return: The created of this JiraProject.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this JiraProject.


        :param created: The created of this JiraProject.  # noqa: E501
        :type: str
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
