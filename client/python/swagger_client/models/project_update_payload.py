# coding: utf-8

"""
    RobusTest Api

    RobusTest Apis  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProjectUpdatePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'bug_project': 'str',
        'users': 'list[str]',
        'admin': 'list[str]'
    }

    attribute_map = {
        'active': 'active',
        'bug_project': 'bugProject',
        'users': 'users',
        'admin': 'admin'
    }

    def __init__(self, active=None, bug_project=None, users=None, admin=None):  # noqa: E501
        """ProjectUpdatePayload - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._bug_project = None
        self._users = None
        self._admin = None
        self.discriminator = None

        self.active = active
        self.bug_project = bug_project
        self.users = users
        self.admin = admin

    @property
    def active(self):
        """Gets the active of this ProjectUpdatePayload.  # noqa: E501


        :return: The active of this ProjectUpdatePayload.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ProjectUpdatePayload.


        :param active: The active of this ProjectUpdatePayload.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def bug_project(self):
        """Gets the bug_project of this ProjectUpdatePayload.  # noqa: E501


        :return: The bug_project of this ProjectUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._bug_project

    @bug_project.setter
    def bug_project(self, bug_project):
        """Sets the bug_project of this ProjectUpdatePayload.


        :param bug_project: The bug_project of this ProjectUpdatePayload.  # noqa: E501
        :type: str
        """
        if bug_project is None:
            raise ValueError("Invalid value for `bug_project`, must not be `None`")  # noqa: E501

        self._bug_project = bug_project

    @property
    def users(self):
        """Gets the users of this ProjectUpdatePayload.  # noqa: E501


        :return: The users of this ProjectUpdatePayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ProjectUpdatePayload.


        :param users: The users of this ProjectUpdatePayload.  # noqa: E501
        :type: list[str]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users

    @property
    def admin(self):
        """Gets the admin of this ProjectUpdatePayload.  # noqa: E501


        :return: The admin of this ProjectUpdatePayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this ProjectUpdatePayload.


        :param admin: The admin of this ProjectUpdatePayload.  # noqa: E501
        :type: list[str]
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")  # noqa: E501

        self._admin = admin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectUpdatePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
