=begin comment

RobusTest Hub

RobusTest Hub Api [http://mobile.robustest.com:8085 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::HubApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# adb_command
#
# run adb  command
# 
# @param Device5 $device  (optional)
{
    my $params = {
    'device' => {
        data_type => 'Device5',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'adb_command' } = { 
    	summary => 'run adb  command',
        params => $params,
        returns => 'InlineResponse2001',
        };
}
# @return InlineResponse2001
#
sub adb_command {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/command';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'device'}) {
        $_body_data = $args{'device'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2001', $response);
    return $_response_object;
}

#
# device_shell
#
# run adb shell command
# 
# @param Device4 $device  (optional)
{
    my $params = {
    'device' => {
        data_type => 'Device4',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'device_shell' } = { 
    	summary => 'run adb shell command',
        params => $params,
        returns => 'InlineResponse200',
        };
}
# @return InlineResponse200
#
sub device_shell {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/shell';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'device'}) {
        $_body_data = $args{'device'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse200', $response);
    return $_response_object;
}

#
# devices_list
#
# list all attached devices to RobusTest
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'devices_list' } = { 
    	summary => 'list all attached devices to RobusTest',
        params => $params,
        returns => 'HubDevices',
        };
}
# @return HubDevices
#
sub devices_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/devices';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('HubDevices', $response);
    return $_response_object;
}

#
# free_device
#
# free device
# 
# @param Device1 $device  (optional)
{
    my $params = {
    'device' => {
        data_type => 'Device1',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'free_device' } = { 
    	summary => 'free device',
        params => $params,
        returns => 'Device',
        };
}
# @return Device
#
sub free_device {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'device'}) {
        $_body_data = $args{'device'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Device', $response);
    return $_response_object;
}

#
# get_free_device
#
# get free device based on given parameters
# 
# @param Device $device  (optional)
{
    my $params = {
    'device' => {
        data_type => 'Device',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_free_device' } = { 
    	summary => 'get free device based on given parameters',
        params => $params,
        returns => 'Device',
        };
}
# @return Device
#
sub get_free_device {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'device'}) {
        $_body_data = $args{'device'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Device', $response);
    return $_response_object;
}

#
# reverse_device
#
# reverse a device
# 
# @param Device2 $device  (optional)
{
    my $params = {
    'device' => {
        data_type => 'Device2',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'reverse_device' } = { 
    	summary => 'reverse a device',
        params => $params,
        returns => 'Device',
        };
}
# @return Device
#
sub reverse_device {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/reverse';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'device'}) {
        $_body_data = $args{'device'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Device', $response);
    return $_response_object;
}

#
# unreverse_device
#
# unrevrse the device
# 
# @param Device3 $device  (optional)
{
    my $params = {
    'device' => {
        data_type => 'Device3',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'unreverse_device' } = { 
    	summary => 'unrevrse the device',
        params => $params,
        returns => 'Device',
        };
}
# @return Device
#
sub unreverse_device {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/device/reverse';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'device'}) {
        $_body_data = $args{'device'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Device', $response);
    return $_response_object;
}

1;
