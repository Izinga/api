=begin comment



Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::TestsuiteApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::SwaggerClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::SwaggerClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# test_suites_for_project
#
# get all test suite for project
# 
# @param string $project_id project id (required)
{
    my $params = {
    'project_id' => {
        data_type => 'string',
        description => 'project id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_suites_for_project' } = { 
    	summary => 'get all test suite for project',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub test_suites_for_project {
    my ($self, %args) = @_;

    # verify the required parameter 'project_id' is set
    unless (exists $args{'project_id'}) {
      croak("Missing the required parameter 'project_id' when calling test_suites_for_project");
    }

    # parse inputs
    my $_resource_path = '/v3/testsuites';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'project_id'}) {
        my $_base_variable = "{" . "projectID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'project_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# test_suites_for_project_0
#
# get all test suite for project
# 
# @param string $id test suite id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'test suite id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_suites_for_project_0' } = { 
    	summary => 'get all test suite for project',
        params => $params,
        returns => 'Testsuite',
        };
}
# @return Testsuite
#
sub test_suites_for_project_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling test_suites_for_project_0");
    }

    # parse inputs
    my $_resource_path = '/v3/testsuite';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Testsuite', $response);
    return $_response_object;
}

1;
