// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [JiraConfig]
            Decoders.addDecoder(clazz: [JiraConfig].self) { (source: AnyObject) -> [JiraConfig] in
                return Decoders.decode(clazz: [JiraConfig].self, source: source)
            }
            // Decoder for JiraConfig
            Decoders.addDecoder(clazz: JiraConfig.self) { (source: AnyObject) -> JiraConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JiraConfig()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance.source = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.updated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated"])
                instance.created = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created"])
                return instance
            }


            // Decoder for [JiraConfigPayload]
            Decoders.addDecoder(clazz: [JiraConfigPayload].self) { (source: AnyObject) -> [JiraConfigPayload] in
                return Decoders.decode(clazz: [JiraConfigPayload].self, source: source)
            }
            // Decoder for JiraConfigPayload
            Decoders.addDecoder(clazz: JiraConfigPayload.self) { (source: AnyObject) -> JiraConfigPayload in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JiraConfigPayload()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                return instance
            }


            // Decoder for [JiraIssuePayload]
            Decoders.addDecoder(clazz: [JiraIssuePayload].self) { (source: AnyObject) -> [JiraIssuePayload] in
                return Decoders.decode(clazz: [JiraIssuePayload].self, source: source)
            }
            // Decoder for JiraIssuePayload
            Decoders.addDecoder(clazz: JiraIssuePayload.self) { (source: AnyObject) -> JiraIssuePayload in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JiraIssuePayload()
                instance.projectKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["projectKey"])
                instance.assingeeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["assingeeName"])
                instance.assingeeKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["assingeeKey"])
                instance.reporterName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reporterName"])
                instance.reporterKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reporterKey"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.attachements = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["attachements"])
                return instance
            }


            // Decoder for [JiraIssuePayloadAttachements]
            Decoders.addDecoder(clazz: [JiraIssuePayloadAttachements].self) { (source: AnyObject) -> [JiraIssuePayloadAttachements] in
                return Decoders.decode(clazz: [JiraIssuePayloadAttachements].self, source: source)
            }
            // Decoder for JiraIssuePayloadAttachements
            Decoders.addDecoder(clazz: JiraIssuePayloadAttachements.self) { (source: AnyObject) -> JiraIssuePayloadAttachements in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JiraIssuePayloadAttachements()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.data = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [JiraIssueResponse]
            Decoders.addDecoder(clazz: [JiraIssueResponse].self) { (source: AnyObject) -> [JiraIssueResponse] in
                return Decoders.decode(clazz: [JiraIssueResponse].self, source: source)
            }
            // Decoder for JiraIssueResponse
            Decoders.addDecoder(clazz: JiraIssueResponse.self) { (source: AnyObject) -> JiraIssueResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JiraIssueResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance._self = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["self"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                return instance
            }


            // Decoder for [JiraProject]
            Decoders.addDecoder(clazz: [JiraProject].self) { (source: AnyObject) -> [JiraProject] in
                return Decoders.decode(clazz: [JiraProject].self, source: source)
            }
            // Decoder for JiraProject
            Decoders.addDecoder(clazz: JiraProject.self) { (source: AnyObject) -> JiraProject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JiraProject()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance.source = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source"])
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.desc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["desc"])
                instance.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.component = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["component"])
                instance.updated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated"])
                instance.created = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created"])
                return instance
            }


            // Decoder for [JiraProjectComponent]
            Decoders.addDecoder(clazz: [JiraProjectComponent].self) { (source: AnyObject) -> [JiraProjectComponent] in
                return Decoders.decode(clazz: [JiraProjectComponent].self, source: source)
            }
            // Decoder for JiraProjectComponent
            Decoders.addDecoder(clazz: JiraProjectComponent.self) { (source: AnyObject) -> JiraProjectComponent in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JiraProjectComponent()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [JiraProjectUsers]
            Decoders.addDecoder(clazz: [JiraProjectUsers].self) { (source: AnyObject) -> [JiraProjectUsers] in
                return Decoders.decode(clazz: [JiraProjectUsers].self, source: source)
            }
            // Decoder for JiraProjectUsers
            Decoders.addDecoder(clazz: JiraProjectUsers.self) { (source: AnyObject) -> JiraProjectUsers in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JiraProjectUsers()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.avatarUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatarUrl"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                return instance
            }


            // Decoder for [Project]
            Decoders.addDecoder(clazz: [Project].self) { (source: AnyObject) -> [Project] in
                return Decoders.decode(clazz: [Project].self, source: source)
            }
            // Decoder for Project
            Decoders.addDecoder(clazz: Project.self) { (source: AnyObject) -> Project in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Project()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.org = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["org"])
                instance.os = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["os"])
                instance.icon64 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icon64"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.bugProject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bugProject"])
                instance.admin = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["admin"])
                instance.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"])
                instance.testC = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["test_c"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.isUniversal = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_universal"])
                instance.last = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last"])
                instance.created = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created"])
                instance.updated = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated"])
                instance.updateBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["update_by"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created_by"])
                return instance
            }


            // Decoder for [ProjectUpdatePayload]
            Decoders.addDecoder(clazz: [ProjectUpdatePayload].self) { (source: AnyObject) -> [ProjectUpdatePayload] in
                return Decoders.decode(clazz: [ProjectUpdatePayload].self, source: source)
            }
            // Decoder for ProjectUpdatePayload
            Decoders.addDecoder(clazz: ProjectUpdatePayload.self) { (source: AnyObject) -> ProjectUpdatePayload in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProjectUpdatePayload()
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.bugProject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bugProject"])
                instance.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"])
                instance.admin = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["admin"])
                return instance
            }
        }
    }
}
