//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class DefaultAPI: APIBase {
    /**
     get list for all supported bug trakers
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func bug(completion: ((data: [String]?, error: ErrorType?) -> Void)) {
        bugWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     get list for all supported bug trakers
     - GET /admin/v3/bug/trackerlist
     - get list for all supported bug trakers
     - examples: [{contentType=application/json, example=[ "", "" ]}]

     - returns: RequestBuilder<[String]> 
     */
    public class func bugWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/admin/v3/bug/trackerlist"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     get all jira config
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func jira(completion: ((data: [JiraConfig]?, error: ErrorType?) -> Void)) {
        jiraWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     get all jira config
     - GET /admin/v3/bug/config/jira
     - get all jira config
     - examples: [{contentType=application/json, example=[ {
  "password" : "password",
  "createdBy" : "createdBy",
  "created" : "created",
  "name" : "name",
  "_id" : "_id",
  "source" : "source",
  "type" : "type",
  "user" : "user",
  "updated" : "updated",
  "url" : "url"
}, {
  "password" : "password",
  "createdBy" : "createdBy",
  "created" : "created",
  "name" : "name",
  "_id" : "_id",
  "source" : "source",
  "type" : "type",
  "user" : "user",
  "updated" : "updated",
  "url" : "url"
} ]}]

     - returns: RequestBuilder<[JiraConfig]> 
     */
    public class func jiraWithRequestBuilder() -> RequestBuilder<[JiraConfig]> {
        let path = "/admin/v3/bug/config/jira"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[JiraConfig]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     create a jira config
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func jiraConfig(body body: JiraConfigPayload, completion: ((data: [String]?, error: ErrorType?) -> Void)) {
        jiraConfigWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     create a jira config
     - POST /admin/v3/bug/config/jira
     - create a jira config
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<[String]> 
     */
    public class func jiraConfigWithRequestBuilder(body body: JiraConfigPayload) -> RequestBuilder<[String]> {
        let path = "/admin/v3/bug/config/jira"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     update a jira config
     
     - parameter payload: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func jiraConfig_0(payload payload: JiraConfigPayload, completion: ((data: JiraConfig?, error: ErrorType?) -> Void)) {
        jiraConfig_0WithRequestBuilder(payload: payload).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     update a jira config
     - PUT /admin/v3/bug/config/jira/{jiraConfigId}
     - update a jira config
     - examples: [{contentType=application/json, example={
  "password" : "password",
  "createdBy" : "createdBy",
  "created" : "created",
  "name" : "name",
  "_id" : "_id",
  "source" : "source",
  "type" : "type",
  "user" : "user",
  "updated" : "updated",
  "url" : "url"
}}]
     
     - parameter payload: (body)  

     - returns: RequestBuilder<JiraConfig> 
     */
    public class func jiraConfig_0WithRequestBuilder(payload payload: JiraConfigPayload) -> RequestBuilder<JiraConfig> {
        let path = "/admin/v3/bug/config/jira/{jiraConfigId}"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = payload.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<JiraConfig>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     update all projects for a jira config
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func jiraConfig_1(completion: ((data: [String]?, error: ErrorType?) -> Void)) {
        jiraConfig_1WithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     update all projects for a jira config
     - PATCH /admin/v3/bug/config/jira/{jiraConfigId}
     - update all projects for a jira config
     - examples: [{contentType=application/json, example=[ "", "" ]}]

     - returns: RequestBuilder<[String]> 
     */
    public class func jiraConfig_1WithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/admin/v3/bug/config/jira/{jiraConfigId}"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     create a jira issue
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func jiraIssue(body body: JiraIssuePayload, completion: ((data: JiraIssueResponse?, error: ErrorType?) -> Void)) {
        jiraIssueWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     create a jira issue
     - POST /v3/bug/jira/{jiraProjectId}/create
     - create a jira issue
     - examples: [{contentType=application/json, example={
  "self" : "self",
  "id" : "id",
  "key" : "key"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<JiraIssueResponse> 
     */
    public class func jiraIssueWithRequestBuilder(body body: JiraIssuePayload) -> RequestBuilder<JiraIssueResponse> {
        let path = "/v3/bug/jira/{jiraProjectId}/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<JiraIssueResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     get all jira project
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func jira_0(completion: ((data: [JiraProject]?, error: ErrorType?) -> Void)) {
        jira_0WithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     get all jira project
     - GET /admin/v3/bug/config/jira/projects
     - get all jira project
     - examples: [{contentType=application/json, example=[ {
  "component" : [ {
    "name" : "name",
    "id" : "id"
  }, {
    "name" : "name",
    "id" : "id"
  } ],
  "created" : "created",
  "name" : "name",
  "_id" : "_id",
  "source" : "source",
  "id" : "id",
  "type" : "type",
  "updated" : "updated",
  "key" : "key",
  "users" : [ {
    "avatarUrl" : "avatarUrl",
    "displayName" : "displayName",
    "name" : "name",
    "key" : "key",
    "email" : "email"
  }, {
    "avatarUrl" : "avatarUrl",
    "displayName" : "displayName",
    "name" : "name",
    "key" : "key",
    "email" : "email"
  } ],
  "desc" : "desc"
}, {
  "component" : [ {
    "name" : "name",
    "id" : "id"
  }, {
    "name" : "name",
    "id" : "id"
  } ],
  "created" : "created",
  "name" : "name",
  "_id" : "_id",
  "source" : "source",
  "id" : "id",
  "type" : "type",
  "updated" : "updated",
  "key" : "key",
  "users" : [ {
    "avatarUrl" : "avatarUrl",
    "displayName" : "displayName",
    "name" : "name",
    "key" : "key",
    "email" : "email"
  }, {
    "avatarUrl" : "avatarUrl",
    "displayName" : "displayName",
    "name" : "name",
    "key" : "key",
    "email" : "email"
  } ],
  "desc" : "desc"
} ]}]

     - returns: RequestBuilder<[JiraProject]> 
     */
    public class func jira_0WithRequestBuilder() -> RequestBuilder<[JiraProject]> {
        let path = "/admin/v3/bug/config/jira/projects"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[JiraProject]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     get all jira project for given config
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func jira_1(completion: ((data: [JiraProject]?, error: ErrorType?) -> Void)) {
        jira_1WithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     get all jira project for given config
     - GET /admin/v3/bug/config/jira/{congfigId}/projects
     - get all jira project for given config
     - examples: [{contentType=application/json, example=[ {
  "component" : [ {
    "name" : "name",
    "id" : "id"
  }, {
    "name" : "name",
    "id" : "id"
  } ],
  "created" : "created",
  "name" : "name",
  "_id" : "_id",
  "source" : "source",
  "id" : "id",
  "type" : "type",
  "updated" : "updated",
  "key" : "key",
  "users" : [ {
    "avatarUrl" : "avatarUrl",
    "displayName" : "displayName",
    "name" : "name",
    "key" : "key",
    "email" : "email"
  }, {
    "avatarUrl" : "avatarUrl",
    "displayName" : "displayName",
    "name" : "name",
    "key" : "key",
    "email" : "email"
  } ],
  "desc" : "desc"
}, {
  "component" : [ {
    "name" : "name",
    "id" : "id"
  }, {
    "name" : "name",
    "id" : "id"
  } ],
  "created" : "created",
  "name" : "name",
  "_id" : "_id",
  "source" : "source",
  "id" : "id",
  "type" : "type",
  "updated" : "updated",
  "key" : "key",
  "users" : [ {
    "avatarUrl" : "avatarUrl",
    "displayName" : "displayName",
    "name" : "name",
    "key" : "key",
    "email" : "email"
  }, {
    "avatarUrl" : "avatarUrl",
    "displayName" : "displayName",
    "name" : "name",
    "key" : "key",
    "email" : "email"
  } ],
  "desc" : "desc"
} ]}]

     - returns: RequestBuilder<[JiraProject]> 
     */
    public class func jira_1WithRequestBuilder() -> RequestBuilder<[JiraProject]> {
        let path = "/admin/v3/bug/config/jira/{congfigId}/projects"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[JiraProject]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     get a jira project  details
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func jira_2(completion: ((data: JiraProject?, error: ErrorType?) -> Void)) {
        jira_2WithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     get a jira project  details
     - GET /admin/v3/bug/config/jira/projects/{jiraProjectId}
     - get a jira project details
     - examples: [{contentType=application/json, example={
  "component" : [ {
    "name" : "name",
    "id" : "id"
  }, {
    "name" : "name",
    "id" : "id"
  } ],
  "created" : "created",
  "name" : "name",
  "_id" : "_id",
  "source" : "source",
  "id" : "id",
  "type" : "type",
  "updated" : "updated",
  "key" : "key",
  "users" : [ {
    "avatarUrl" : "avatarUrl",
    "displayName" : "displayName",
    "name" : "name",
    "key" : "key",
    "email" : "email"
  }, {
    "avatarUrl" : "avatarUrl",
    "displayName" : "displayName",
    "name" : "name",
    "key" : "key",
    "email" : "email"
  } ],
  "desc" : "desc"
}}]

     - returns: RequestBuilder<JiraProject> 
     */
    public class func jira_2WithRequestBuilder() -> RequestBuilder<JiraProject> {
        let path = "/admin/v3/bug/config/jira/projects/{jiraProjectId}"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<JiraProject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update Project
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func project(body body: ProjectUpdatePayload, completion: ((data: Project?, error: ErrorType?) -> Void)) {
        projectWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update Project
     - PUT /v3/project/{projectId}
     - Update Project from user interface
     - examples: [{contentType=application/json, example={
  "bugProject" : "bugProject",
  "test_c" : 0.80082819046101150206595775671303272247314453125,
  "icon64" : "icon64",
  "os" : "os",
  "last" : "last",
  "org" : "org",
  "created" : "created",
  "is_universal" : true,
  "admin" : [ "admin", "admin" ],
  "active" : true,
  "type" : "type",
  "created_by" : "created_by",
  "url" : "url",
  "users" : [ "users", "users" ],
  "name" : "name",
  "_id" : "_id",
  "update_by" : "update_by",
  "updated" : "updated"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Project> 
     */
    public class func projectWithRequestBuilder(body body: ProjectUpdatePayload) -> RequestBuilder<Project> {
        let path = "/v3/project/{projectId}"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Project>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
